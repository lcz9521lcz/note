vue数据监听
	watch的使用---用于监视数据的变化
		在data中先定义好数据并使用
		与data同级的位置有一个watch属性, 也是一个对象, 在其中可以定义一些与data中要监视的数据同名的函数, 用于监听data中数据的变化:
			let vm = new Vue({
				el: '#app',
				data: {
					msg: '嘻嘻嘻'
				},
				methods: {},
				watch: {
					// 此处的函数名必须和data中要监视的数据一致
					msg(newVal, oldVal) {
						// 当msg发生变化的时候会执行该函数, 在此处可以处理一些操作
					}
				}
			})
		除了可以监视data中已有数据, watch还可以监视vm实例身上的属性, 例如最常用的就是监视路由的变化: $route 对象的变化
			watch: {
				$route(to, from
					// to 表示路由改变后的值
					// from 表示路由改变前的值
				}
			}

	computed属性的使用
		1.计算属性就是定义在 computed 中的函数, 虽然是一个函数, 使用时和data中的属性一模一样, 就当成一个普通的数据使用即可
		2.在计算属性内部用到的所有数据, 只要发生了变化, 计算属性会自动同步
		3.同步的结果还会缓存, 如果多个地方引用了计算属性, 不会重复计算, 每次更新只会计算一次
		4.由于计算属性使用和data中的属性一模一样, 也是挂载到vm实例身上的一个数据, 所以不能和data中的属性产生冲突, 重复声明!!!
		5.计算属性无法通过外界修改, 只有当内部引用的数据发生变化时才会自动更新
			data: {
				msg: '好好学习'
			},
			computed: {
				fullMessage() {
					return this.msg + '天天向上'
				}
			}
		当msg发生变化时, fullMessage会自动更新
		