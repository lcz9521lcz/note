v-for 列表渲染
	1.渲染普通数组
		例:   list: [1, 2, 3, 4, 5, 6]  
		       <p v-for="(item, index) in list"> 每一项: {{ item }} </p>
	
	2.渲染对象数组
		例:   users: [ { id: 1, name: 'zs1' }, { id: 2, name: 'zs2' }, { id: 3, name: 'zs3' }, { id: 4, name: 'zs4' } ]
		       <p v-for="(user, index) in users"> 用户ID: {{ user.id }} </p>

	3.渲染对象
		例:   user: { id: 1, name: '托尼', gender: '男' }
		       <p v-for="(val, key) in user"> 键: {{ key }} </p>

	4.迭代数字
		例:   <p v-for="item in 20"> {{ item }} </p>

v-for 中的 key 属性
	结论: 除非使用的列表非常简单, 或者追求极致的性能体验, 都建议在使用v-for时加上 key 属性

	原理: 由于使用v-for渲染列表时, vue不会记录每个列表项和数据之间的关系, 都是统一按照**索引**进行渲染的, 如果此时有一个复选框表单元素被勾选, 然后将新的元素插入到列表的前面, 导致整个列表顺序发生变化, 那么复选框也会跟随索引而勾选 不会跟随数据勾选

	解决方式: 在使用v-for时加上 :key 属性绑定, 绑定的值为每项数据的唯一标识, 而且数据类型必须是number / string 一般都用id作为唯一标识, 如果没有id时也可以使用索引 实在不行用name也行

v-if 和 v-show
	1.v-if和v-show都是用于控制元素的显示隐藏
	2.v-if有较高的切换渲染消耗
	3.v-show有较高的初始渲染消耗
	总结: 如果需要频繁的切换显示隐藏推荐使用v-show, 如果只需要一次切换, 或者一次都没有, 则使用v-if